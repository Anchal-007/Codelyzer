package com.eduthrill.codelyser.Controller;

import com.eduthrill.codelyser.Entity.JwtRequest;
import com.eduthrill.codelyser.Entity.JwtResponse;
import com.eduthrill.codelyser.Entity.User;
import com.eduthrill.codelyser.Repository.UserRepository;
import com.eduthrill.codelyser.Service.UserDetailsServiceImplementation;
import com.eduthrill.codelyser.util.JwtUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.web.bind.annotation.*;

import java.security.Principal;
import java.util.Date;


@RestController
@CrossOrigin("*")
public class AuthenticationController {

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private UserDetailsServiceImplementation userDetailsServiceImplementation;

    @Autowired
    private JwtUtils jwtUtil;

    @Autowired
    UserRepository userRepository;

    @PostMapping("/generate-token")
    public ResponseEntity<?> generateToken(@RequestBody JwtRequest authrequest) throws Exception {

        System.out.println("AuthRequest data is: "+authrequest);

        try {System.out.println(this.userDetailsServiceImplementation.loadUserByUsername(authrequest.getUsername()));

            System.out.println("user with name"+authrequest.getUsername()+" "+"has requested to access the data");

            authenticate(authrequest.getUsername(),authrequest.getPassword());
        }

        catch(Exception e) {
            throw new Exception("Invalid username and password please try again!");
        }

        String token=jwtUtil.generateToken(authrequest.getUsername());

        return ResponseEntity.ok(new JwtResponse(token));

    }

    private void authenticate(String username,String password) throws Exception {
        try {
            this.authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username,password));
        }
        catch(DisabledException e) {
            throw new Exception("User is disabled "+e.getMessage());
        }
        catch(BadCredentialsException e) {
            throw new Exception("user credential is invalid!! please try with valid credentials "+e.getMessage());
        }
    }

    @GetMapping("/current-user")
    public User getCurrentUser(Principal principal) {
        return (User)this.userDetailsServiceImplementation.loadUserByUsername(principal.getName());
    }

    @GetMapping("/jwt-token-status/{token}")
    public boolean isTokengetsExpiredOrNot(@PathVariable("token") String token) {
        System.out.println("token status request is generated by the client"+token);
        return this.jwtUtil.extractExpiration(token).before(new Date());
    }

}
